<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>keil使用</title>
    <url>/2024/09/16/keil%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="概述-来自搜索">概述(来自搜索)</h2>
<p>Keil提供了包括C编译器、宏汇编、链接器、库管理和一个功能强大的仿真调试器等在内的完整开发方案，通过一个集成开发环境（μVision）将这些部分组合在一起。</p>
<h2 id="keil新建工程（基于标准库）">keil新建工程（基于标准库）</h2>
<p><a href="https://blog.csdn.net/EleganceJiaBao/article/details/141092467">keil工程文件</a><br>
<a href="https://blog.csdn.net/MQ0522/article/details/121818240">STM32官方固件库（标准外设库下载)</a><br>
<img src="/images/uav/keil_1.png" alt="Test"><br>
keil.arm官网CMSIS PACKS<br>
<img src="/images/uav/keil_2.png" alt="Test"><br>
<a href="https://blog.csdn.net/lnfiniteloop/article/details/134943893?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522B3185469-384D-496E-BBE1-4C414176F11F%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=B3185469-384D-496E-BBE1-4C414176F11F&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-134943893-null-null.142%5Ev100%5Epc_search_result_base9&amp;utm_term=keil%E6%96%B0%E5%BB%BAstm32%E5%B7%A5%E7%A8%8B&amp;spm=1018.2226.3001.4187">新建工程</a></p>
<ol>
<li>Project→<strong>create new project</strong>，选择芯片型号<br>
<img src="/images/uav/keil_3.png" alt="Test"></li>
<li><strong>新建文件夹——移植标准外设库</strong></li>
</ol>
<p>ProjectName/<br>
├── ProjectName.uvprojx         # 项目配置文件<br>
├── ProjectName.uvoptx          # 用户选项配置文件<br>
├── Start/                    # 启动文件夹<br>
│   ├── startup.s               # 启动汇编代码<br>
│   ├── stm32f4xx.h             # STM32F4 系列微控制器头文件<br>
│   ├── system_stm32f4xx.h      # 系统初始化头文件<br>
│   ├── system_stm32f4xx.c      # 系统初始化代码<br>
│   ├── stm32f4xx_conf.h   #配置和定义硬件外设的初始化参数<br>
│   ├── stm32f4xx_it.c<br>
│   ├── stm32f4xx_it.h<br>
│   ├── CMSIS/Core/              # Cortex-M 硬件抽象层,CMSIS 核心文件<br>
│   │   ├── core_cm4.h<br>
│   │   ├── core_cmFunc.h<br>
│   │   ├── core_cmInstr.h<br>
│   │   ├── core_cmSimd.h<br>
├── User/                     # 源文件夹<br>
│   ├── main.c                  # 主程序入口<br>
├── Hardware/                    # 外设<br>
│   ├── peripheral.c            # 外设驱动实现代码<br>
│   ├── peripheral.h            # 外设驱动声明文件<br>
├── Libraries/                  # 库文件夹<br>
│   ├── STM32F4xx_StdPeriph_Driver/inc # STM32 标准外设库<br>
│   ├── STM32F4xx_StdPeriph_Driver/src</p>
<p><strong>从下载的固件库复制相应文件到对应文件夹</strong></p>
<ul>
<li><strong>keil中添加文件</strong><br>
<img src="/images/uav/keil_4.png" alt="Test"></li>
<li><strong>包含相关文件路径</strong><br>
<img src="/images/uav/keil_5.png" alt="Test"><br>
<strong>预处理定义</strong><br>
需要选择使用的芯片</li>
</ul>
<blockquote>
<p>可能的报错</p>
<ol>
<li>fmc，fsmc相关文件内存在未定义变量名→可能stm32f401不支持，直接删去.c/.h文件</li>
<li>头文件中定义了引用了main.h，由于直接从示例项目中copy，本项目未建立main.h，所以将该引用注释掉即可<br>
<img src="/images/uav/keil_6.png" alt="Test"></li>
</ol>
</blockquote>
<ol start="3">
<li>做个点灯，检测一下</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;stm32f4xx.h&quot;</span><br><span class="line">#include &quot;stm32f4xx_rcc.h&quot;</span><br><span class="line">#include &quot;stm32f4xx_gpio.h&quot;</span><br><span class="line"></span><br><span class="line">void GPIO_INIT(void)&#123;</span><br><span class="line">        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);</span><br><span class="line"></span><br><span class="line">        GPIO_InitTypeDef GPIO_InitStructure;        </span><br><span class="line">        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">        GPIO_InitStructure.GPIO_Mode =GPIO_Mode_OUT ; </span><br><span class="line">        GPIO_InitStructure.GPIO_Speed =GPIO_Speed_50MHz;</span><br><span class="line">        GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;</span><br><span class="line">        GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;</span><br><span class="line">        GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">&#125;       </span><br><span class="line">int main (void)&#123;     </span><br><span class="line">        </span><br><span class="line">        GPIO_INIT();</span><br><span class="line">        </span><br><span class="line">        while(1)</span><br><span class="line">        &#123;</span><br><span class="line">                GPIO_SetBits(GPIOA,GPIO_Pin_5);</span><br><span class="line">                for (int i = 0; i &lt; 1000000; i++);</span><br><span class="line">                GPIO_ResetBits(GPIOA, GPIO_Pin_5);</span><br><span class="line">                for (int i = 0; i &lt; 1000000; i++);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="keil调试">keil调试</h2>
<p><a href="https://blog.csdn.net/ybhuangfugui/article/details/51706145">keil调试</a></p>
<h2 id="配置相关">配置相关</h2>
<p><strong>Option for target</strong><br>
<a href="https://www.strongerhuang.com/Keil/Keil%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B05_%E5%B7%A5%E7%A8%8B%E7%9B%AE%E6%A0%87%E9%80%89%E9%A1%B9%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89.html">keil工程目标选项配置</a></p>
<blockquote>
<p>个人觉得这个博主关于keil的系列介绍的很详细，感兴趣的可以看一看，我只在这里记录一些常用的配置，不常用的不展开说明</p>
</blockquote>
<ul>
<li>Device<br>
<img src="/images/uav/keil_7.png" alt="Test"><br>
新建工程的时候<strong>选择使用设备</strong>（在此之前需要去keil.arm下载相关设备的包）</li>
<li>target<br>
<img src="/images/uav/keil_8.png" alt="Test"></li>
</ul>
<ol>
<li>Arm 编译器</li>
<li>分为片外和片内<br>
<strong>ROM (Flash) 地址</strong>：在 ‘Read/Only Memory Areas’ 部分，你可以看到 ‘Start’ 和 ‘Size’ 字段，这里填入的是 Flash 存储器的起始地址和大小。<br>
程序存储地址<br>
<strong>RAM 地址</strong>：在 ‘Read/Write Memory Areas’ 部分，同样会显示 ‘Start’ 和 ‘Size’ 字段，用于设置 RAM 的起始地址和大小。<br>
<img src="/images/uav/keil_9.png" alt="Test"><br>
<img src="/images/uav/keil_10.png" alt="Test"></li>
</ol>
<ul>
<li>Output<br>
<img src="/images/uav/keil_11.png" alt="Test"><br>
输出可执行文件/库的地址，信息配置（初学者保持默认选项即可）</li>
<li>Listing<br>
<img src="/images/uav/keil_12.png" alt="Test"><br>
生成列表相关配置</li>
<li>User<br>
<img src="/images/uav/keil_13.png" alt="Test"><br>
编辑之前/编译之前/编译之后执行的程序</li>
<li>C++<br>
<img src="/images/uav/keil_14.png" alt="Test"></li>
</ul>
<ol>
<li>Preprocessor symbols预处理定义<br>
stm32f4xx.h文件中即不用再定义使用芯片</li>
<li>Language / Code Generation</li>
<li>Include path<br>
项目文件所在文件夹路径都包含进来</li>
<li>Misc Controls 多功能控件</li>
<li>Compiler control string<br>
对编译器执行的指令</li>
</ol>
<ul>
<li>Asm<br>
<img src="/images/uav/keil_15.png" alt="Test"><br>
针对asm汇编的配置，与C/C++配置内容相对应</li>
<li>Linker链接器配置<br>
<img src="/images/uav/keil_16.png" alt="Test"><br>
Use Memory Layout from Target Dialog内存配置对话</li>
<li>Debug<br>
<img src="/images/uav/keil_17.png" alt="Test"></li>
<li>Utilities<br>
<img src="/images/uav/keil_18.png" alt="Test"><br>
Setting：设置<br>
很多人下载程序之后，需要复位一下程序才运行，原因在于没有勾选“Reset and Run”<br>
<img src="/images/uav/keil_19.png" alt="Test"></li>
</ul>
]]></content>
      <categories>
        <category>四轴</category>
        <category>嵌入式入门</category>
      </categories>
      <tags>
        <tag>keil</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2024/08/10/test/</url>
    <content><![CDATA[<h1>Hello World</h1>
<h2 id="欢迎来到基地！">欢迎来到基地！</h2>
<blockquote>
<p>💡下面是基地创建者的小小尝试</p>
</blockquote>
<h3 id="代码">代码</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="链接">链接</h3>
<p><a href="https://github.com/Hatty-z">github</a></p>
<p><strong>基地搭建起来啦🥳🥳🥳</strong></p>
]]></content>
  </entry>
  <entry>
    <title>手势识别模型部署在esp32s3（一）</title>
    <url>/2024/09/17/%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%9C%A8esp32s3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1>模型开发</h1>
<h2 id="1-数据">1. 数据</h2>
<ul>
<li>收集</li>
<li>划分数据集（训练集，验证集，测试集）</li>
<li>预处理<br>
<em>提高数据质量，模型训练效果</em></li>
</ul>
<h2 id="2-模型的选择与设计">2. 模型的选择与设计</h2>
<h2 id="3-模型训练，验证与调优">3. 模型训练，验证与调优</h2>
<ul>
<li>使用训练集进行模型训练</li>
<li>使用验证集进行模型性能评估</li>
<li>调整超参数（学习率，批次大小，迭代次数）<br>
<em>确保模型具有良好的性能与泛化能力</em></li>
</ul>
<h2 id="4-模型评估">4. 模型评估</h2>
<p>使用测试集进行模型性能评估<br>
<strong>评估指标</strong>（准确率，召回率，F1_score等）</p>
<h2 id="5-模型优化">5. 模型优化</h2>
<ul>
<li><strong>模型剪枝</strong>：减少模型参数，去除冗余节点，提高推理速度。</li>
<li><strong>模型量化</strong>：将模型从浮点数精度降低到定点数精度（如FP32到INT8），减少计算量和内存占用。</li>
</ul>
<blockquote>
<p>量化时遇到两种量化方法选择<br>
查阅资料：<br>
两种量化方式的比较<br>
(A) <strong>动态量化</strong> (Dynamic Quantization)<br>
动态量化在推理过程中对激活值（如权重和中间结果）进行量化。这意味着模型在推理时会动态地将某些浮点运算转换为整数运算，以提高推理效率。此方法不需要校准数据集，适合一些模型在部署时简化量化过程。<br>
- 优点:<br>
- 不需要校准数据集，过程较为简单。<br>
- 可以立即用于大部分推理任务。<br>
- 通常会保留浮点精度，适用于大部分任务。<br>
- 缺点:<br>
- 对硬件加速器的支持不如静态量化好。<br>
- 在一些情况下，推理速度的提升有限。<br>
(B) 静态量化 (Static Quantization)<br>
静态量化需要在推理之前对整个模型进行量化。它通常使用校准数据集来估计模型的激活范围，并将其转化为整数格式。这种方法可以显著降低模型的大小和计算复杂度，并且在硬件加速器（如ESP32-S3）上表现更好。<br>
- 优点:<br>
- 大幅减少模型的大小和计算成本。<br>
- 在硬件加速器上的性能优化效果更明显。<br>
- 可用于部署在资源受限的设备上，如微控制器。<br>
- 缺点:<br>
- 需要一个校准数据集，步骤较为复杂。<br>
- 可能会导致精度下降，尤其是在模型对量化敏感的情况下。<br>
1. 如何选择<br>
- 如果你需要一个较为简单的量化过程，并且对性能要求不高，可以选择动态量化。<br>
- 如果你希望最大化模型在硬件上的性能，且有校准数据集，那么静态量化可能是更好的选择。</p>
</blockquote>
<ul>
<li><strong>蒸馏学习</strong> ：使用一个大模型（教师模型）指导小模型（学生模型）学习，提高小模型的性能。<br>
减少模型的计算量与内存占用，提高推理速度与部署效率</li>
</ul>
<h2 id="6-模型部署">6. 模型部署</h2>
<p>选择合适的推理框架（TensorFlow Lite, ONNX Runtime等）</p>
<blockquote>
<p>查阅TensorFlow Lite  &amp; ONNX Runtime<br>
<strong>平台和兼容性</strong>：<br>
- TensorFlow Lite：主要设计用于移动和嵌入式设备上，如Android和iOS手机。它对TensorFlow生态系统有很好的支持。<br>
- ONNX Runtime：支持多种平台，包括Windows、Linux、MacOS以及移动设备。它可以执行用多种框架训练的模型，只要这些模型被转换成ONNX格式，如PyTorch、TensorFlow、Scikit-Learn等。<br>
模型转换和支持：<br>
- TensorFlow Lite：需要将TensorFlow模型转换成TFLite格式。这一过程可能涉及到功能的简化或修改，因为TFLite不支持TensorFlow的全部操作。<br>
- ONNX Runtime：可以加载ONNX格式的模型，这是一个开放的模型格式，支持多种深度学习框架。如果你的模型是用PyTorch、MXNet等其他框架训练的，ONNX Runtime可能是更好的选择。<br>
性能和优化：<br>
- TensorFlow Lite：提供了多种优化选项，包括量化和使用硬件加速（如GPU和TPU）。<br>
- ONNX Runtime：也提供优化和硬件加速支持，包括使用NVIDIA的TensorRT、Intel的DNNL等。它的性能优化通常在服务器和云环境中表现更为突出。</p>
</blockquote>
<h2 id="7-监控与维护">7.  监控与维护</h2>
<ul>
<li>实时监控：监控模型在实际使用中的表现，及时发现和解决问题。</li>
<li>定期更新：根据新数据和新需求，定期更新和重新训练模型，保持模型性能。</li>
</ul>
]]></content>
      <categories>
        <category>模型轻量化部署</category>
      </categories>
      <tags>
        <tag>嵌入式ai</tag>
        <tag>esp32</tag>
      </tags>
  </entry>
</search>
